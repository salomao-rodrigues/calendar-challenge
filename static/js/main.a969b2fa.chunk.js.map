{"version":3,"sources":["hoc/withModal/index.js","components/AddReminderForm/index.js","actions/index.js","components/MonthView/index.js","App.js","serviceWorker.js","store/reducers/reminders.js","constants/actionTypes.js","index.js"],"names":["withModal","Component","_React$Component","ComponentWithModal","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","modalIsOpen","openModal","setState","closeModal","inherits","createClass","key","value","react_default","a","createElement","assign","props","React","AddReminderForm","onInputChangeHandler","_ref","_ref$target","target","name","defineProperty","onDateChangeHandler","date","onSubmitHandler","event","_this$props","onSubmit","afterSubmit","preventDefault","title","Date","type","onChange","placeholder","required","maxLength","entry_default","locale","connect","daysInMonth","month","year","getDate","modalStyle","content","top","left","right","bottom","marginRight","minHeight","minWidth","transform","WEEK_DAYS","MonthView","onDateClickHandler","day","selectedDate","getTime","setDate","_this2","_this$props$reminders","reminders","getFullYear","getMonth","totalDays","startOffset","getDay","endOffset","numRows","mappedReminders","firstDay","lastDay","reduce","remindersPerDay","reminder","reminderTime","push","mapRemindersToDays","className","style","gridTemplateRows","map","fill","val","index","onClick","lib_default","isOpen","onRequestClose","src_components_AddReminderForm","compose","App","react","components_MonthView","Boolean","window","location","hostname","match","insertComparator","b","undefined","action","newState","toConsumableArray","binarySearchInsert","Modal","setAppElement","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a969b2fa.chunk.js","sourcesContent":["import React from 'react';\n\nconst withModal = Component => (\n  class ComponentWithModal extends React.Component {\n  state = { modalIsOpen: false };\n\n  openModal = () => {\n    this.setState({ modalIsOpen: true });\n  };\n\n  closeModal = () => {\n    this.setState({ modalIsOpen: false });\n  };\n\n  render() {\n    return <Component\n      {...this.props}\n      {...this.state}\n      openModal={ this.openModal }\n      closeModal={ this.closeModal }\n    />;\n  }\n}\n)\n\nexport default withModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport DateTimePicker from 'react-datetime-picker';\n\nimport { addReminder } from '../../actions';\n\nimport './index.css';\n\nexport class AddReminderForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      date: props.date || new Date(),\n      title: ''\n    };\n  }\n\n  onInputChangeHandler = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  onDateChangeHandler = date => {\n    this.setState({ date });\n  };\n\n  onSubmitHandler = event => {\n    const { onSubmit, afterSubmit } = this.props;\n    event.preventDefault();\n    onSubmit(this.state.title, this.state.date);\n\n    if (afterSubmit) {\n      afterSubmit();\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmitHandler}>\n        <div>\n          <input\n            type=\"text\"\n            name=\"title\"\n            onChange={this.onInputChangeHandler}\n            placeholder=\"Title\"\n            required={true}\n            maxLength={30}\n          />\n        </div>\n        <div>\n          <DateTimePicker\n            locale=\"en-GB\"\n            onChange={this.onDateChangeHandler}\n            value={this.state.date}\n            required={true}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">Save</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nAddReminderForm.propTypes = {\n  date: PropTypes.instanceOf(Date),\n  onSubmit: PropTypes.func.isRequired,\n  afterSubmit: PropTypes.func\n};\n\nexport default connect(\n  null,\n  { onSubmit: addReminder }\n)(AddReminderForm);\n","export const addReminder = (title, date) => ({\n  type: 'ADD_REMINDER',\n  title,\n  date\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'recompose';\nimport { connect } from 'react-redux';\nimport Modal from 'react-modal';\n\nimport withModal from '../../hoc/withModal';\nimport AddReminderForm from '../AddReminderForm';\nimport './MonthView.scss';\n\nconst daysInMonth = (month, year) => {\n  return new Date(year, month + 1, 0).getDate();\n};\n\nconst modalStyle = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    minHeight: 400,\n    minWidth: 400,\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\nconst mapRemindersToDays = (reminders, date) => {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const firstDay = new Date(year, month, 1);\n  const totalDays = daysInMonth(month, year);\n  const lastDay = new Date(year, month, totalDays);\n\n  return reminders.reduce((remindersPerDay, reminder) => {\n    const reminderTime = reminder.date.getTime();\n    if (reminderTime >= firstDay && reminderTime <= lastDay) {\n      if (remindersPerDay[reminder.date.getDate()]) {\n        remindersPerDay[reminder.date.getDate()].push(reminder);\n      } else {\n        remindersPerDay[reminder.date.getDate()] = [reminder];\n      }\n    }\n\n    return remindersPerDay;\n  }, {});\n};\n\nconst WEEK_DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nexport class MonthView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { selectedDate: props.date || new Date() };\n  }\n\n  onDateClickHandler = day => {\n    const selectedDate = new Date(this.state.selectedDate.getTime());\n    selectedDate.setDate(day);\n\n    this.setState({ selectedDate }, this.props.openModal());\n  };\n\n  render() {\n    const { reminders = [], modalIsOpen, closeModal } = this.props;\n    const { selectedDate } = this.state;\n\n    const year = selectedDate.getFullYear();\n    const month = selectedDate.getMonth();\n\n    const totalDays = daysInMonth(month, year);\n    const startOffset = new Date(year, month, 1).getDay();\n    const endOffset = 7 - ((startOffset + totalDays) % 7);\n    const numRows = (totalDays + startOffset + endOffset) / 7;\n    const mappedReminders = mapRemindersToDays(reminders, selectedDate);\n\n    return (\n      <div\n        className=\"month-container\"\n        style={{ gridTemplateRows: `32px repeat(${numRows}, auto)` }}\n      >\n        {WEEK_DAYS.map(day => (\n          <div key={day} className=\"month-header\">\n            {day}\n          </div>\n        ))}\n        {new Array(startOffset).fill().map((val, index) => (\n          <div key={`start-offset-${index}`} className=\"day day--offset\" />\n        ))}\n        {new Array(totalDays).fill().map((val, index) => (\n          <div\n            key={`${year}-${month}-${index}`}\n            className=\"day\"\n            onClick={() => this.onDateClickHandler(index + 1)}\n          >\n            {index + 1}\n            {mappedReminders[index + 1] &&\n              mappedReminders[index + 1].map(({ title }, key) => (\n                <div key={`${key}+${index}`}>{title}</div>\n              ))}\n          </div>\n        ))}\n        {new Array(endOffset).fill().map((val, index) => (\n          <div key={`end-offset-${index}`} className=\"day day--offset\" />\n        ))}\n        <Modal\n          isOpen={modalIsOpen}\n          onRequestClose={closeModal}\n          style={modalStyle}\n        >\n          <AddReminderForm date={selectedDate} afterSubmit={closeModal} />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nMonthView.propTypes = {\n  closeModal: PropTypes.func,\n  date: PropTypes.instanceOf(Date),\n  modalIsOpen: PropTypes.bool,\n  openModal: PropTypes.func,\n  reminders: PropTypes.array\n};\n\nexport default compose(\n  withModal,\n  connect(reminders => ({ reminders }))\n)(MonthView);\n","import React, { Component, Fragment } from 'react';\n\nimport MonthView from './components/MonthView';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <header>\n          <h1>React Redux Calendar Challenge</h1>\n        </header>\n        <main>\n          <MonthView />\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import binarySearchInsert from 'binary-search-insert';\n\nimport * as ActionTypes from '../../constants/actionTypes';\n\nconst insertComparator = (a, b) => a.date.getTime() - b.date.getTime();\n\nconst reminders = (state = [], action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_REMINDER:\n      const { date, title } = action;\n      const newState = [...state];\n      binarySearchInsert(newState, insertComparator, { date, title });\n\n      return newState;\n    default:\n      return state;\n  }\n}\n\nexport default reminders;\n","export const ADD_REMINDER = 'ADD_REMINDER';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport Modal from 'react-modal';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reminders from './store/reducers/reminders';\n\nimport './index.css';\n\nModal.setAppElement('#root');\n\nconst store = createStore(reminders);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}